/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package nepxpress;

import javax.swing.*;
import java.awt.*;
import javax.imageio.ImageIO;

/**
 *
 * @author Dev
 */
public class Dashboard extends javax.swing.JFrame {
    // Custom variables
    private javax.swing.JPanel contentPanel;
    private javax.swing.JPanel dashboardContent;
    private javax.swing.JPanel branchContent;
    private javax.swing.JPanel staffListContent;
    private javax.swing.JPanel parcelsContent;
    private javax.swing.table.DefaultTableModel branchTableModel;
    private javax.swing.table.DefaultTableModel parcelsTableModel;
    private javax.swing.JTextField branchSearchField;
    private javax.swing.JTable branchTable;
    private javax.swing.JTable parcelsTable;
    private javax.swing.JTable staffTable;
    private javax.swing.table.DefaultTableModel staffTableModel;

    /**
     * Creates new form Dashboard
     */
    public Dashboard() {
        initComponents();
        setupMainLayout();
        setupDashboardContent();
        setupBranchContent();
        setupStaffListContent();
        setupParcelsContent();
        
        // Add action listener for dashboard button
        dashboardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ((java.awt.CardLayout) contentPanel.getLayout()).show(contentPanel, "dashboard");
            }
        });
        
        // Add action listener for branch button
        branchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ((java.awt.CardLayout) contentPanel.getLayout()).show(contentPanel, "branch");
            }
        });

        // Add action listener for staff list
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                if (jComboBox1.getSelectedItem().equals("List All")) {
                    ((java.awt.CardLayout) contentPanel.getLayout()).show(contentPanel, "stafflist");
                }
            }
        });
        
        // Show dashboard by default
        ((java.awt.CardLayout) contentPanel.getLayout()).show(contentPanel, "dashboard");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPanel1 = new javax.swing.JPanel();
        adminLabel1 = new javax.swing.JLabel();
        dashboardButton = new javax.swing.JButton();
        branchButton = new javax.swing.JButton();
        parcelsButton = new javax.swing.JButton();
        trackparcelsButton = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        nepXpressLabel = new javax.swing.JLabel();
        contentPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("nepXpress - Admin Dashboard");
        
        // Set minimum size to ensure content visibility
        setMinimumSize(new java.awt.Dimension(1000, 600));
        
        // Set preferred size slightly larger than minimum
        setPreferredSize(new java.awt.Dimension(1200, 700));
        
        // Make window resizable
        setResizable(true);
        
        // Center the window on screen
        setLocationRelativeTo(null);

        // Add window state listener to handle minimization
        addWindowStateListener(new java.awt.event.WindowStateListener() {
            public void windowStateChanged(java.awt.event.WindowEvent evt) {
                if (evt.getNewState() == java.awt.Frame.ICONIFIED) {
                    // When minimized, store current size
                    setPreferredSize(getSize());
                } else if (evt.getNewState() == java.awt.Frame.NORMAL) {
                    // When restored, ensure minimum size
                    if (getWidth() < 1000 || getHeight() < 600) {
                        setSize(1000, 600);
                    }
                    validate();
                    repaint();
                }
            }
        });

        // Add component listener to handle resizing
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                // Ensure minimum size is maintained during resize
                int width = getWidth();
                int height = getHeight();
                boolean resize = false;
                
                if (width < 1000) {
                    width = 1000;
                    resize = true;
                }
                
                if (height < 600) {
                    height = 600;
                    resize = true;
                }
                
                if (resize) {
                    setSize(width, height);
                }
            }
        });

        // Update the content panel to use better layout constraints
        contentPanel.setLayout(new java.awt.BorderLayout());
        contentPanel.setBackground(java.awt.Color.WHITE);
        contentPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));

        // Make the sidebar (jPanel1) have a fixed preferred width
        jPanel1.setPreferredSize(new java.awt.Dimension(200, jPanel1.getPreferredSize().height));
        jPanel1.setMinimumSize(new java.awt.Dimension(200, 0));

        // Make the top bar (jPanel2) have a fixed preferred height
        jPanel2.setPreferredSize(new java.awt.Dimension(jPanel2.getPreferredSize().width, 45));
        jPanel2.setMinimumSize(new java.awt.Dimension(0, 45));

        jPanel1.setBackground(new java.awt.Color(30, 57, 76));
        jPanel1.setVerifyInputWhenFocusTarget(false);

        adminLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        adminLabel1.setForeground(new java.awt.Color(255, 255, 255));
        adminLabel1.setText("ADMIN");

        dashboardButton.setBackground(new java.awt.Color(30, 57, 76));
        dashboardButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        dashboardButton.setForeground(new java.awt.Color(255, 255, 255));
        dashboardButton.setText("Dashboard");
        dashboardButton.setBorder(null);
        dashboardButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        dashboardButton.setPreferredSize(new java.awt.Dimension(200, 35));
        dashboardButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(8, 15, 8, 15));

        branchButton.setBackground(new java.awt.Color(30, 57, 76));
        branchButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        branchButton.setForeground(new java.awt.Color(255, 255, 255));
        branchButton.setText("Branch");
        branchButton.setBorder(null);
        branchButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        parcelsButton.setBackground(new java.awt.Color(30, 57, 76));
        parcelsButton.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        parcelsButton.setForeground(new java.awt.Color(255, 255, 255));
        parcelsButton.setText("Parcels");
        parcelsButton.setBorder(null);
        parcelsButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        trackparcelsButton.setBackground(new java.awt.Color(30, 57, 76));
        trackparcelsButton.setFont(new java.awt.Font("Segoe UI", 1, 12));
        trackparcelsButton.setForeground(new java.awt.Color(255, 255, 255));
        trackparcelsButton.setText("Track Parcels");
        trackparcelsButton.setBorder(null);
        trackparcelsButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        trackparcelsButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        trackparcelsButton.setIconTextGap(10);
        
        // Load and set the tracking icon
        try {
            javax.swing.ImageIcon originalIcon = new javax.swing.ImageIcon(getClass().getResource("/icons/tracking.png"));
            java.awt.Image scaledImage = originalIcon.getImage().getScaledInstance(20, 20, java.awt.Image.SCALE_SMOOTH);
            trackparcelsButton.setIcon(new javax.swing.ImageIcon(scaledImage));
        } catch (Exception e) {
            System.err.println("Error loading tracking icon: " + e.getMessage());
        }

        // Add padding to the button text
        trackparcelsButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 15, 5, 15));

        jComboBox1.setBackground(new java.awt.Color(30, 57, 76));
        jComboBox1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jComboBox1.setForeground(new java.awt.Color(255, 255, 255));
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Branch Staff", "Add New", "List All" }));
        jComboBox1.setBorder(null);
        jComboBox1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(dashboardButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(branchButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                .addComponent(adminLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(parcelsButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(trackparcelsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(adminLabel1)
                .addGap(18, 18, 18)
                .addComponent(dashboardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(branchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(parcelsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(trackparcelsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(98, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(70, 119, 150));
        jPanel2.setPreferredSize(new java.awt.Dimension(jPanel2.getPreferredSize().width, 45));

        nepXpressLabel.setFont(new java.awt.Font("Segoe UI", 1, 14));
        nepXpressLabel.setForeground(new java.awt.Color(255, 255, 255));
        nepXpressLabel.setText("nepXpress");
        nepXpressLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(nepXpressLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 
                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nepXpressLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        contentPanel.setLayout(new java.awt.CardLayout());
        contentPanel.setBackground(java.awt.Color.WHITE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 
                    javax.swing.GroupLayout.DEFAULT_SIZE, 
                    javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 
                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(contentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 
                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 
                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 
                    javax.swing.GroupLayout.DEFAULT_SIZE, 
                    javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(contentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 
                    javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
        setupTrackParcelsContent();
    }// </editor-fold>//GEN-END:initComponents

    private void setupMainLayout() {
        // Add action listeners for parcels and track parcels buttons
        parcelsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ((java.awt.CardLayout) contentPanel.getLayout()).show(contentPanel, "parcels");
            }
        });

        trackparcelsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ((java.awt.CardLayout) contentPanel.getLayout()).show(contentPanel, "trackparcels");
            }
        });

        // Add Branch Staff menu items
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"Branch Staff", "Add New", "List All"}));
        jComboBox1.setBackground(new java.awt.Color(30, 57, 76));
        jComboBox1.setForeground(java.awt.Color.WHITE);
        jComboBox1.setBorder(null);
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String selectedItem = (String) jComboBox1.getSelectedItem();
                if ("Add New".equals(selectedItem)) {
                    showAddStaffDialog();
                    jComboBox1.setSelectedItem("Branch Staff"); // Reset selection
                } else if ("List All".equals(selectedItem)) {
                    ((java.awt.CardLayout) contentPanel.getLayout()).show(contentPanel, "stafflist");
                    jComboBox1.setSelectedItem("Branch Staff"); // Reset selection
                }
            }
        });

        // Add hover effect to navigation buttons
        java.awt.Color hoverColor = new java.awt.Color(40, 67, 86);
        java.awt.Color defaultColor = new java.awt.Color(30, 57, 76);

        javax.swing.JButton[] buttons = {dashboardButton, branchButton, parcelsButton, trackparcelsButton};
        for (javax.swing.JButton button : buttons) {
            button.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseEntered(java.awt.event.MouseEvent evt) {
                    button.setBackground(hoverColor);
                }
                public void mouseExited(java.awt.event.MouseEvent evt) {
                    button.setBackground(defaultColor);
                }
            });
        }

        // Add hover effect to combo box
        jComboBox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jComboBox1.setBackground(hoverColor);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jComboBox1.setBackground(defaultColor);
            }
        });
    }

    private void setupDashboardContent() {
        // Create dashboard panel
        dashboardContent = new javax.swing.JPanel();
        dashboardContent.setLayout(new java.awt.BorderLayout(0, 0));
        dashboardContent.setBackground(java.awt.Color.WHITE);
        
        // Create main content panel
        javax.swing.JPanel mainContent = new javax.swing.JPanel();
        mainContent.setLayout(new java.awt.BorderLayout());
        mainContent.setBackground(java.awt.Color.WHITE);
        mainContent.setBorder(javax.swing.BorderFactory.createEmptyBorder(30, 0, 0, 0));
        
        // Add title panel with "Home"
        javax.swing.JPanel titlePanel = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));
        titlePanel.setBackground(java.awt.Color.WHITE);
        javax.swing.JLabel titleLabel = new javax.swing.JLabel("Home");
        titleLabel.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 32));
        titlePanel.add(titleLabel);
        titlePanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(
            javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(200, 200, 200)),
            javax.swing.BorderFactory.createEmptyBorder(20, 30, 10, 30)
        ));
        
        // Create wrapper panel with BorderLayout for better scaling
        javax.swing.JPanel wrapperPanel = new javax.swing.JPanel();
        wrapperPanel.setLayout(new java.awt.BorderLayout());
        wrapperPanel.setBackground(java.awt.Color.WHITE);
        
        // Create center panel to hold cards with FlowLayout
        javax.swing.JPanel centerPanel = new javax.swing.JPanel();
        centerPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 30, 20));
        centerPanel.setBackground(java.awt.Color.WHITE);
        centerPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 30, 20, 30));
        
        // Create cards panel with GridLayout
        javax.swing.JPanel cardsPanel = new javax.swing.JPanel();
        cardsPanel.setLayout(new java.awt.GridLayout(2, 3, 30, 30));
        cardsPanel.setBackground(java.awt.Color.WHITE);
        
        // Add cards
        addStatCard(cardsPanel, "Total Branches", "3", null);
        addStatCard(cardsPanel, "Staff", "50", null);
        addStatCard(cardsPanel, "Total Parcels", "10", null);
        addStatCard(cardsPanel, "Delivered", "0", null);
        addStatCard(cardsPanel, "In-Transit", "2", null);
        addStatCard(cardsPanel, "Shipped", "5", null);
        
        // Add cards panel to center panel
        centerPanel.add(cardsPanel);
        
        // Add center panel to wrapper
        wrapperPanel.add(centerPanel, java.awt.BorderLayout.CENTER);
        
        // Create scroll pane for responsiveness
        javax.swing.JScrollPane scrollPane = new javax.swing.JScrollPane(wrapperPanel);
        scrollPane.setBorder(null);
        scrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        scrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
        scrollPane.getVerticalScrollBar().setUnitIncrement(16);
        
        // Update the final assembly
        mainContent.add(titlePanel, java.awt.BorderLayout.NORTH);
        mainContent.add(scrollPane, java.awt.BorderLayout.CENTER);
        dashboardContent.add(mainContent, java.awt.BorderLayout.CENTER);
        
        // Add dashboard content to main content panel
        contentPanel.add(dashboardContent, "dashboard");
        
        // Add component listener to handle resizing
        wrapperPanel.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                // Calculate card size based on available space
                int availableWidth = wrapperPanel.getWidth() - 120; // Account for margins
                int availableHeight = wrapperPanel.getHeight() - 100; // Account for margins
                
                // Calculate card dimensions (minimum 250x120, scales up with window)
                int cardWidth = Math.max(250, availableWidth / 3 - 40);
                int cardHeight = Math.max(120, availableHeight / 2 - 40);
                
                // Update card sizes
                for (java.awt.Component comp : cardsPanel.getComponents()) {
                    if (comp instanceof javax.swing.JPanel) {
                        comp.setPreferredSize(new java.awt.Dimension(cardWidth, cardHeight));
                        
                        // Update font sizes based on card size
                        javax.swing.JPanel card = (javax.swing.JPanel) comp;
                        for (java.awt.Component cardComp : card.getComponents()) {
                            if (cardComp instanceof javax.swing.JLabel) {
                                javax.swing.JLabel label = (javax.swing.JLabel) cardComp;
                                if (label.getFont().getSize() == 32) {
                                    // Value label - scale between 32 and 48
                                    int fontSize = Math.min(48, Math.max(32, cardWidth / 6));
                                    label.setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, fontSize));
                                } else {
                                    // Title label - scale between 14 and 20
                                    int fontSize = Math.min(20, Math.max(14, cardWidth / 15));
                                    label.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, fontSize));
                                }
                            }
                        }
                    }
                }
                
                // Update cards panel size
                cardsPanel.setPreferredSize(new java.awt.Dimension(
                    cardWidth * 3 + 60,  // Total width plus gaps
                    cardHeight * 2 + 30   // Total height plus gap
                ));
                
                cardsPanel.revalidate();
                cardsPanel.repaint();
            }
        });
    }

    private void addStatCard(javax.swing.JPanel parent, String title, String value, String iconPath) {
        // Create card panel
        javax.swing.JPanel card = new javax.swing.JPanel();
        card.setLayout(new java.awt.BorderLayout(10, 5));
        card.setBackground(java.awt.Color.WHITE);
        card.setBorder(javax.swing.BorderFactory.createCompoundBorder(
            javax.swing.BorderFactory.createLineBorder(new java.awt.Color(230, 230, 230), 1),
            javax.swing.BorderFactory.createEmptyBorder(20, 20, 20, 20)
        ));
        
        // Create value label with larger font
        javax.swing.JLabel valueLabel = new javax.swing.JLabel(value);
        valueLabel.setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 32));
        valueLabel.setForeground(new java.awt.Color(30, 57, 76));
        
        // Create title label with smaller font
        javax.swing.JLabel titleLabel = new javax.swing.JLabel(title);
        titleLabel.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 14));
        titleLabel.setForeground(new java.awt.Color(128, 128, 128));
        
        // Add components to card
        card.add(valueLabel, java.awt.BorderLayout.NORTH);
        card.add(titleLabel, java.awt.BorderLayout.CENTER);
        
        parent.add(card);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel adminLabel1;
    private javax.swing.JButton branchButton;
    private javax.swing.JButton dashboardButton;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel nepXpressLabel;
    private javax.swing.JButton parcelsButton;
    private javax.swing.JButton trackparcelsButton;
    // End of variables declaration//GEN-END:variables

    private void setupBranchContent() {
        // Create branch panel
        branchContent = new javax.swing.JPanel();
        branchContent.setLayout(new java.awt.BorderLayout(0, 0));
        branchContent.setBackground(java.awt.Color.WHITE);
        
        // Create main content panel
        javax.swing.JPanel mainContent = new javax.swing.JPanel();
        mainContent.setLayout(new java.awt.BorderLayout());
        mainContent.setBackground(java.awt.Color.WHITE);
        mainContent.setBorder(javax.swing.BorderFactory.createEmptyBorder(30, 0, 0, 0));
        
        // Create title panel
        javax.swing.JPanel titlePanel = new javax.swing.JPanel();
        titlePanel.setLayout(new java.awt.BorderLayout());
        titlePanel.setBackground(java.awt.Color.WHITE);
        titlePanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 30, 0, 30));
        
        // Add title "Branch List"
        javax.swing.JLabel titleLabel = new javax.swing.JLabel("Branch List");
        titleLabel.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 32));
        titlePanel.add(titleLabel);
        
        // Add separator
        titlePanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(
            javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(200, 200, 200)),
            javax.swing.BorderFactory.createEmptyBorder(0, 0, 20, 0)
        ));
        
        // Create controls panel
        javax.swing.JPanel controlsPanel = new javax.swing.JPanel(new java.awt.BorderLayout());
        controlsPanel.setBackground(java.awt.Color.WHITE);
        controlsPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 30, 20, 30));
        
        // Left side - Show entries
        javax.swing.JPanel leftControls = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        leftControls.setBackground(java.awt.Color.WHITE);
        leftControls.add(new javax.swing.JLabel("Show"));
        javax.swing.JComboBox<String> entriesCombo = new javax.swing.JComboBox<>(new String[]{"10", "25", "50", "100"});
        entriesCombo.setPreferredSize(new java.awt.Dimension(70, 25));
        leftControls.add(entriesCombo);
        leftControls.add(new javax.swing.JLabel("entries"));
        
        // Right side - Search box
        javax.swing.JPanel rightControls = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));
        rightControls.setBackground(java.awt.Color.WHITE);
        branchSearchField = new javax.swing.JTextField(20);
        branchSearchField.setPreferredSize(new java.awt.Dimension(200, 25));
        rightControls.add(new javax.swing.JLabel("Search:"));
        rightControls.add(branchSearchField);

        // Add New button
        javax.swing.JButton addNewButton = new javax.swing.JButton("+ Add New");
        addNewButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 12));
        addNewButton.setBackground(new java.awt.Color(0, 123, 255));
        addNewButton.setForeground(java.awt.Color.WHITE);
        addNewButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
        addNewButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addNewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAddBranchDialog();
            }
        });
        rightControls.add(addNewButton);

        // Add search functionality
        branchSearchField.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
            public void changedUpdate(javax.swing.event.DocumentEvent e) { search(); }
            public void removeUpdate(javax.swing.event.DocumentEvent e) { search(); }
            public void insertUpdate(javax.swing.event.DocumentEvent e) { search(); }

            public void search() {
                String searchText = branchSearchField.getText().toLowerCase();
                javax.swing.table.TableRowSorter<javax.swing.table.DefaultTableModel> sorter = 
                    new javax.swing.table.TableRowSorter<>(branchTableModel);
                branchTable.setRowSorter(sorter);
                
                if (searchText.length() == 0) {
                    sorter.setRowFilter(null);
                } else {
                    sorter.setRowFilter(javax.swing.RowFilter.regexFilter("(?i)" + searchText));
                }
            }
        });
        
        controlsPanel.add(leftControls, java.awt.BorderLayout.WEST);
        controlsPanel.add(rightControls, java.awt.BorderLayout.EAST);
        
        // Create table panel
        javax.swing.JPanel tablePanel = new javax.swing.JPanel(new java.awt.BorderLayout());
        tablePanel.setBackground(java.awt.Color.WHITE);
        tablePanel.setBorder(null);
        
        // Create table model with column names
        String[] columnNames = {"#", "Branch Code", "Street/Building/Brgy", "City/State/Zip", "Country", "Contact#", "Action"};
        Object[][] data = {
            {1, "vzTL0PqMogyOWhF", "Branch 1 St., Quiapo", "Manila, Metro Manila, 1001", "Philippines", "+2 123 455 623", ""},
            {2, "Kylab3mYBgAX7Jt", "Sample", "Cebu, Cebu, 6000", "Philippines", "+1234567489", ""},
            {3, "dlbUK5mEh96f0Zc", "Sample", "Sample, Sample, 123456", "Philippines", "123456", ""}
        };
        
        branchTableModel = new javax.swing.table.DefaultTableModel(data, columnNames) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return column == 6; // Only allow editing the action column
            }
        };
        
        // Create table
        branchTable = new javax.swing.JTable(branchTableModel);
        branchTable.setRowHeight(40);
        branchTable.setShowGrid(false);
        branchTable.setIntercellSpacing(new java.awt.Dimension(0, 0));
        branchTable.getTableHeader().setBackground(java.awt.Color.WHITE);
        branchTable.getTableHeader().setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 12));
        branchTable.setBorder(null);
        
        // Set custom renderer and editor for action column
        branchTable.getColumnModel().getColumn(6).setCellRenderer(new BranchActionColumnRenderer());
        branchTable.getColumnModel().getColumn(6).setCellEditor(new BranchActionColumnEditor());
        
        // Add table to scroll pane
        javax.swing.JScrollPane scrollPane = new javax.swing.JScrollPane(branchTable);
        scrollPane.setBorder(null);
        scrollPane.setBackground(java.awt.Color.WHITE);
        scrollPane.getViewport().setBackground(java.awt.Color.WHITE);
        tablePanel.add(scrollPane);
        
        // Create footer panel
        javax.swing.JPanel footerPanel = new javax.swing.JPanel(new java.awt.BorderLayout());
        footerPanel.setBackground(java.awt.Color.WHITE);
        footerPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 30, 30, 30));
        
        // Add showing entries text
        javax.swing.JLabel showingLabel = new javax.swing.JLabel("Showing 1 to 3 of 3 entries");
        footerPanel.add(showingLabel, java.awt.BorderLayout.WEST);
        
        // Add pagination
        javax.swing.JPanel paginationPanel = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));
        paginationPanel.setBackground(java.awt.Color.WHITE);
        
        javax.swing.JButton prevButton = new javax.swing.JButton("Previous");
        prevButton.setEnabled(false);
        
        javax.swing.JButton pageButton = new javax.swing.JButton("1");
        pageButton.setBackground(new java.awt.Color(0, 123, 255));
        pageButton.setForeground(java.awt.Color.WHITE);
        
        javax.swing.JButton nextButton = new javax.swing.JButton("Next");
        nextButton.setEnabled(false);
        
        paginationPanel.add(prevButton);
        paginationPanel.add(pageButton);
        paginationPanel.add(nextButton);
        
        footerPanel.add(paginationPanel, java.awt.BorderLayout.EAST);
        
        // Create center panel
        javax.swing.JPanel centerPanel = new javax.swing.JPanel(new java.awt.BorderLayout());
        centerPanel.setBackground(java.awt.Color.WHITE);
        centerPanel.add(controlsPanel, java.awt.BorderLayout.NORTH);
        centerPanel.add(tablePanel, java.awt.BorderLayout.CENTER);
        centerPanel.add(footerPanel, java.awt.BorderLayout.SOUTH);
        
        // Update the final assembly
        mainContent.add(titlePanel, java.awt.BorderLayout.NORTH);
        mainContent.add(centerPanel, java.awt.BorderLayout.CENTER);
        branchContent.add(mainContent, java.awt.BorderLayout.CENTER);
        
        // Add branch content to main content panel
        contentPanel.add(branchContent, "branch");
    }

    private void setupStaffListContent() {
        // Create staff list panel
        staffListContent = new javax.swing.JPanel();
        staffListContent.setLayout(new java.awt.BorderLayout(0, 0));
        staffListContent.setBackground(java.awt.Color.WHITE);
        
        // Create main content panel
        javax.swing.JPanel mainContent = new javax.swing.JPanel();
        mainContent.setLayout(new java.awt.BorderLayout());
        mainContent.setBackground(java.awt.Color.WHITE);
        mainContent.setBorder(javax.swing.BorderFactory.createEmptyBorder(30, 0, 0, 0));
        
        // Create title panel
        javax.swing.JPanel titlePanel = new javax.swing.JPanel();
        titlePanel.setLayout(new java.awt.BorderLayout());
        titlePanel.setBackground(java.awt.Color.WHITE);
        titlePanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 30, 0, 30));
        
        // Add title "Staff List"
        javax.swing.JLabel titleLabel = new javax.swing.JLabel("Staff List");
        titleLabel.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 32));
        titlePanel.add(titleLabel);
        
        // Add separator
        titlePanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(
            javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(200, 200, 200)),
            javax.swing.BorderFactory.createEmptyBorder(0, 0, 20, 0)
        ));
        
        // Create controls panel
        javax.swing.JPanel controlsPanel = new javax.swing.JPanel(new java.awt.BorderLayout());
        controlsPanel.setBackground(java.awt.Color.WHITE);
        controlsPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 30, 20, 30));
        
        // Left side - Show entries
        javax.swing.JPanel leftControls = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        leftControls.setBackground(java.awt.Color.WHITE);
        leftControls.add(new javax.swing.JLabel("Show"));
        javax.swing.JComboBox<String> entriesCombo = new javax.swing.JComboBox<>(new String[]{"10", "25", "50", "100"});
        entriesCombo.setPreferredSize(new java.awt.Dimension(70, 25));
        leftControls.add(entriesCombo);
        leftControls.add(new javax.swing.JLabel("entries"));
        
        // Right side - Search box
        javax.swing.JPanel rightControls = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));
        rightControls.setBackground(java.awt.Color.WHITE);
        javax.swing.JTextField searchField = new javax.swing.JTextField(20);
        searchField.setPreferredSize(new java.awt.Dimension(200, 25));
        rightControls.add(new javax.swing.JLabel("Search:"));
        rightControls.add(searchField);
        
        controlsPanel.add(leftControls, java.awt.BorderLayout.WEST);
        controlsPanel.add(rightControls, java.awt.BorderLayout.EAST);
        
        // Create table panel
        javax.swing.JPanel tablePanel = new javax.swing.JPanel(new java.awt.BorderLayout());
        tablePanel.setBackground(java.awt.Color.WHITE);
        tablePanel.setBorder(null);
        
        // Create table model with column names
        String[] columnNames = {"#", "Staff ID", "First Name", "Last Name", "Email", "Phone", "Branch", "Role", "Action"};
        Object[][] data = {
            {1, "STF1234567", "John", "Doe", "john.doe@gmail.com", "1234567890", "Branch 1", "Branch Manager", ""},
            {2, "STF7654321", "Jane", "Smith", "jane.smith@gmail.com", "9876543210", "Branch 2", "Staff", ""}
        };
        
        staffTableModel = new javax.swing.table.DefaultTableModel(data, columnNames) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return column == 8; // Only allow editing the action column
            }
        };
        
        // Create table
        staffTable = new javax.swing.JTable(staffTableModel);
        staffTable.setRowHeight(40);
        staffTable.setShowGrid(false);
        staffTable.setIntercellSpacing(new java.awt.Dimension(0, 0));
        staffTable.getTableHeader().setBackground(java.awt.Color.WHITE);
        staffTable.getTableHeader().setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 12));
        staffTable.setBorder(null);
        
        // Set custom renderer and editor for action column
        staffTable.getColumnModel().getColumn(8).setCellRenderer(new StaffActionColumnRenderer());
        staffTable.getColumnModel().getColumn(8).setCellEditor(new StaffActionColumnEditor());
        
        // Add table to scroll pane
        javax.swing.JScrollPane scrollPane = new javax.swing.JScrollPane(staffTable);
        scrollPane.setBorder(null);
        scrollPane.setBackground(java.awt.Color.WHITE);
        scrollPane.getViewport().setBackground(java.awt.Color.WHITE);
        tablePanel.add(scrollPane);
        
        // Create footer panel
        javax.swing.JPanel footerPanel = new javax.swing.JPanel(new java.awt.BorderLayout());
        footerPanel.setBackground(java.awt.Color.WHITE);
        footerPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 30, 30, 30));
        
        // Add showing entries text
        javax.swing.JLabel showingLabel = new javax.swing.JLabel("Showing 1 to " + data.length + " of " + data.length + " entries");
        footerPanel.add(showingLabel, java.awt.BorderLayout.WEST);
        
        // Add pagination
        javax.swing.JPanel paginationPanel = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));
        paginationPanel.setBackground(java.awt.Color.WHITE);
        
        javax.swing.JButton prevButton = new javax.swing.JButton("Previous");
        prevButton.setEnabled(false);
        
        javax.swing.JButton pageButton = new javax.swing.JButton("1");
        pageButton.setBackground(new java.awt.Color(0, 123, 255));
        pageButton.setForeground(java.awt.Color.WHITE);
        
        javax.swing.JButton nextButton = new javax.swing.JButton("Next");
        nextButton.setEnabled(false);
        
        paginationPanel.add(prevButton);
        paginationPanel.add(pageButton);
        paginationPanel.add(nextButton);
        
        footerPanel.add(paginationPanel, java.awt.BorderLayout.EAST);
        
        // Add search functionality
        searchField.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
            public void changedUpdate(javax.swing.event.DocumentEvent e) { search(); }
            public void removeUpdate(javax.swing.event.DocumentEvent e) { search(); }
            public void insertUpdate(javax.swing.event.DocumentEvent e) { search(); }

            public void search() {
                String searchText = searchField.getText().toLowerCase();
                javax.swing.table.TableRowSorter<javax.swing.table.DefaultTableModel> sorter = 
                    new javax.swing.table.TableRowSorter<>(staffTableModel);
                staffTable.setRowSorter(sorter);
                
                if (searchText.length() == 0) {
                    sorter.setRowFilter(null);
                } else {
                    sorter.setRowFilter(javax.swing.RowFilter.regexFilter("(?i)" + searchText));
                }
            }
        });
        
        // Create center panel
        javax.swing.JPanel centerPanel = new javax.swing.JPanel(new java.awt.BorderLayout());
        centerPanel.setBackground(java.awt.Color.WHITE);
        centerPanel.add(controlsPanel, java.awt.BorderLayout.NORTH);
        centerPanel.add(tablePanel, java.awt.BorderLayout.CENTER);
        centerPanel.add(footerPanel, java.awt.BorderLayout.SOUTH);
        
        // Update the final assembly
        mainContent.add(titlePanel, java.awt.BorderLayout.NORTH);
        mainContent.add(centerPanel, java.awt.BorderLayout.CENTER);
        staffListContent.add(mainContent, java.awt.BorderLayout.CENTER);
        
        // Add staff list content to main content panel
        contentPanel.add(staffListContent, "stafflist");
    }

    private void setupParcelsContent() {
        // Create parcels panel
        parcelsContent = new javax.swing.JPanel();
        parcelsContent.setLayout(new java.awt.BorderLayout(0, 0));
        parcelsContent.setBackground(java.awt.Color.WHITE);
        
        // Create main content panel
        javax.swing.JPanel mainContent = new javax.swing.JPanel();
        mainContent.setLayout(new java.awt.BorderLayout());
        mainContent.setBackground(java.awt.Color.WHITE);
        mainContent.setBorder(javax.swing.BorderFactory.createEmptyBorder(30, 0, 0, 0));
        
        // Create title panel
        javax.swing.JPanel titlePanel = new javax.swing.JPanel();
        titlePanel.setLayout(new java.awt.BorderLayout());
        titlePanel.setBackground(java.awt.Color.WHITE);
        titlePanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 30, 0, 30));
        
        // Add title "Parcels"
        javax.swing.JLabel titleLabel = new javax.swing.JLabel("Parcels");
        titleLabel.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 32));
        titlePanel.add(titleLabel);
        
        // Add separator below title
        titlePanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(
            javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(200, 200, 200)),
            javax.swing.BorderFactory.createEmptyBorder(0, 0, 20, 0)
        ));
        
        // Create controls panel
        javax.swing.JPanel controlsPanel = new javax.swing.JPanel(new java.awt.BorderLayout());
        controlsPanel.setBackground(java.awt.Color.WHITE);
        controlsPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 30, 20, 30));
        
        // Left side - Show entries
        javax.swing.JPanel leftControls = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        leftControls.setBackground(java.awt.Color.WHITE);
        leftControls.add(new javax.swing.JLabel("Show"));
        javax.swing.JComboBox<String> entriesCombo = new javax.swing.JComboBox<>(new String[]{"10", "25", "50", "100"});
        entriesCombo.setPreferredSize(new java.awt.Dimension(70, 25));
        leftControls.add(entriesCombo);
        leftControls.add(new javax.swing.JLabel("entries"));
        
        // Right side - Search box
        javax.swing.JPanel rightControls = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));
        rightControls.setBackground(java.awt.Color.WHITE);
        javax.swing.JTextField searchField = new javax.swing.JTextField(20);
        searchField.setPreferredSize(new java.awt.Dimension(200, 25));
        rightControls.add(new javax.swing.JLabel("Search:"));
        rightControls.add(searchField);

        // Add New button
        javax.swing.JButton addNewButton = new javax.swing.JButton("+ Add New");
        addNewButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 12));
        addNewButton.setBackground(new java.awt.Color(0, 123, 255));
        addNewButton.setForeground(java.awt.Color.WHITE);
        addNewButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
        addNewButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addNewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAddParcelDialog();
            }
        });
        rightControls.add(addNewButton);

        // Add search functionality
        searchField.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
            public void changedUpdate(javax.swing.event.DocumentEvent e) { search(); }
            public void removeUpdate(javax.swing.event.DocumentEvent e) { search(); }
            public void insertUpdate(javax.swing.event.DocumentEvent e) { search(); }

            public void search() {
                String searchText = searchField.getText().toLowerCase();
                javax.swing.table.TableRowSorter<javax.swing.table.DefaultTableModel> sorter = 
                    new javax.swing.table.TableRowSorter<>(parcelsTableModel);
                parcelsTable.setRowSorter(sorter);
                
                if (searchText.length() == 0) {
                    sorter.setRowFilter(null);
                } else {
                    sorter.setRowFilter(javax.swing.RowFilter.regexFilter("(?i)" + searchText));
                }
            }
        });
        
        controlsPanel.add(leftControls, java.awt.BorderLayout.WEST);
        controlsPanel.add(rightControls, java.awt.BorderLayout.EAST);
        
        // Create table panel
        javax.swing.JPanel tablePanel = new javax.swing.JPanel(new java.awt.BorderLayout());
        tablePanel.setBackground(java.awt.Color.WHITE);
        tablePanel.setBorder(null);
        
        // Create table model with column names
        String[] columnNames = {"#", "Reference Number", "Sender", "Recipient", "Status", "Action"};
        Object[][] data = {
            {1, "PCL001", "John Doe", "Jane Smith", "In Transit", ""},
            {2, "PCL002", "Bob Johnson", "Alice Brown", "Delivered", ""},
            {3, "PCL003", "Sarah Wilson", "Mike Davis", "Pending", ""}
        };
        
        parcelsTableModel = new javax.swing.table.DefaultTableModel(data, columnNames) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return column == 5; // Only allow editing the action column
            }
        };
        
        // Create table
        parcelsTable = new javax.swing.JTable(parcelsTableModel);
        parcelsTable.setRowHeight(40);
        parcelsTable.setShowGrid(false);
        parcelsTable.setIntercellSpacing(new java.awt.Dimension(0, 0));
        parcelsTable.getTableHeader().setBackground(java.awt.Color.WHITE);
        parcelsTable.getTableHeader().setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 12));
        parcelsTable.setBorder(null);
        
        // Set custom renderer and editor for action column
        parcelsTable.getColumnModel().getColumn(5).setCellRenderer(new ParcelActionColumnRenderer());
        parcelsTable.getColumnModel().getColumn(5).setCellEditor(new ParcelActionColumnEditor());
        
        // Add table to scroll pane
        javax.swing.JScrollPane scrollPane = new javax.swing.JScrollPane(parcelsTable);
        scrollPane.setBorder(null);
        scrollPane.setBackground(java.awt.Color.WHITE);
        scrollPane.getViewport().setBackground(java.awt.Color.WHITE);
        tablePanel.add(scrollPane);
        
        // Create footer panel
        javax.swing.JPanel footerPanel = new javax.swing.JPanel(new java.awt.BorderLayout());
        footerPanel.setBackground(java.awt.Color.WHITE);
        footerPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 30, 30, 30));
        
        // Add showing entries text
        javax.swing.JLabel showingLabel = new javax.swing.JLabel("Showing 1 to 3 of 3 entries");
        footerPanel.add(showingLabel, java.awt.BorderLayout.WEST);
        
        // Add pagination
        javax.swing.JPanel paginationPanel = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT, 5, 0));
        paginationPanel.setBackground(java.awt.Color.WHITE);
        
        javax.swing.JButton prevButton = new javax.swing.JButton("Previous");
        prevButton.setEnabled(false);
        
        javax.swing.JButton pageButton = new javax.swing.JButton("1");
        pageButton.setBackground(new java.awt.Color(0, 123, 255));
        pageButton.setForeground(java.awt.Color.WHITE);
        
        javax.swing.JButton nextButton = new javax.swing.JButton("Next");
        nextButton.setEnabled(false);
        
        paginationPanel.add(prevButton);
        paginationPanel.add(pageButton);
        paginationPanel.add(nextButton);
        
        footerPanel.add(paginationPanel, java.awt.BorderLayout.EAST);
        
        // Create center panel
        javax.swing.JPanel centerPanel = new javax.swing.JPanel(new java.awt.BorderLayout());
        centerPanel.setBackground(java.awt.Color.WHITE);
        centerPanel.add(controlsPanel, java.awt.BorderLayout.NORTH);
        centerPanel.add(tablePanel, java.awt.BorderLayout.CENTER);
        centerPanel.add(footerPanel, java.awt.BorderLayout.SOUTH);
        
        // Update the final assembly
        mainContent.add(titlePanel, java.awt.BorderLayout.NORTH);
        mainContent.add(centerPanel, java.awt.BorderLayout.CENTER);
        parcelsContent.add(mainContent, java.awt.BorderLayout.CENTER);
        
        // Add parcels content to main content panel
        contentPanel.add(parcelsContent, "parcels");
    }

    private javax.swing.JPanel createActionButtons() {
        javax.swing.JPanel actionPanel = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
        actionPanel.setBackground(java.awt.Color.WHITE);

        // Create Edit button
        javax.swing.JButton editButton = new javax.swing.JButton("Edit");
        editButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 12));
        editButton.setBackground(new java.awt.Color(0, 123, 255));
        editButton.setForeground(java.awt.Color.WHITE);
        editButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
        editButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        // Create Delete button
        javax.swing.JButton deleteButton = new javax.swing.JButton("Delete");
        deleteButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 12));
        deleteButton.setBackground(new java.awt.Color(220, 53, 69));
        deleteButton.setForeground(java.awt.Color.WHITE);
        deleteButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
        deleteButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        actionPanel.add(editButton);
        actionPanel.add(deleteButton);

        return actionPanel;
    }

    private class BranchActionColumnRenderer implements javax.swing.table.TableCellRenderer {
        private final javax.swing.JPanel panel;
        private final javax.swing.JButton editButton;
        private final javax.swing.JButton deleteButton;

        public BranchActionColumnRenderer() {
            panel = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
            panel.setBackground(java.awt.Color.WHITE);

            editButton = new javax.swing.JButton("Edit");
            editButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 12));
            editButton.setBackground(new java.awt.Color(0, 123, 255));
            editButton.setForeground(java.awt.Color.WHITE);
            editButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
            editButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

            deleteButton = new javax.swing.JButton("Delete");
            deleteButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 12));
            deleteButton.setBackground(new java.awt.Color(220, 53, 69));
            deleteButton.setForeground(java.awt.Color.WHITE);
            deleteButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
            deleteButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

            panel.add(editButton);
            panel.add(deleteButton);
        }

        @Override
        public java.awt.Component getTableCellRendererComponent(javax.swing.JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
            return panel;
        }
    }

    private class BranchActionColumnEditor extends javax.swing.AbstractCellEditor implements javax.swing.table.TableCellEditor {
        private final javax.swing.JPanel panel;
        private final javax.swing.JButton editButton;
        private final javax.swing.JButton deleteButton;

        public BranchActionColumnEditor() {
            panel = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
            panel.setBackground(java.awt.Color.WHITE);

            editButton = new javax.swing.JButton("Edit");
            editButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 12));
            editButton.setBackground(new java.awt.Color(0, 123, 255));
            editButton.setForeground(java.awt.Color.WHITE);
            editButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
            editButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

            deleteButton = new javax.swing.JButton("Delete");
            deleteButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 12));
            deleteButton.setBackground(new java.awt.Color(220, 53, 69));
            deleteButton.setForeground(java.awt.Color.WHITE);
            deleteButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
            deleteButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

            editButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent e) {
                    int row = branchTable.getSelectedRow();
                    if (row != -1) {
                        row = branchTable.convertRowIndexToModel(row);
                        showEditBranchDialog(row);
                        fireEditingStopped();
                    }
                }
            });

            deleteButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent e) {
                    int row = branchTable.getSelectedRow();
                    if (row != -1) {
                        row = branchTable.convertRowIndexToModel(row);
                        int confirm = javax.swing.JOptionPane.showConfirmDialog(
                            Dashboard.this,
                            "Are you sure you want to delete this branch?",
                            "Confirm Delete",
                            javax.swing.JOptionPane.YES_NO_OPTION,
                            javax.swing.JOptionPane.WARNING_MESSAGE
                        );
                        
                        if (confirm == javax.swing.JOptionPane.YES_OPTION) {
                            branchTableModel.removeRow(row);
                            // Update row numbers
                            for (int i = 0; i < branchTableModel.getRowCount(); i++) {
                                branchTableModel.setValueAt(i + 1, i, 0);
                            }
                            javax.swing.JOptionPane.showMessageDialog(
                                Dashboard.this,
                                "Branch deleted successfully!",
                                "Success",
                                javax.swing.JOptionPane.INFORMATION_MESSAGE
                            );
                        }
                        fireEditingStopped();
                    }
                }
            });

            panel.add(editButton);
            panel.add(deleteButton);
        }

        @Override
        public java.awt.Component getTableCellEditorComponent(javax.swing.JTable table, Object value,
                boolean isSelected, int row, int column) {
            return panel;
        }

        @Override
        public Object getCellEditorValue() {
            return "";
        }
    }

    private void showEditBranchDialog(int row) {
        // Create the dialog
        javax.swing.JDialog dialog = new javax.swing.JDialog(this, "Edit Branch", true);
        dialog.setLayout(new java.awt.BorderLayout());
        
        // Create main panel
        javax.swing.JPanel mainPanel = new javax.swing.JPanel();
        mainPanel.setLayout(new java.awt.GridBagLayout());
        mainPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 20, 20, 20));
        
        java.awt.GridBagConstraints gbc = new java.awt.GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = java.awt.GridBagConstraints.WEST;
        gbc.insets = new java.awt.Insets(5, 5, 5, 5);
        
        // Add form fields
        String[] labels = {"Branch Code:", "Street/Building/Brgy:", "City:", "State/Province:", "ZIP Code:", "Country:", "Contact Number:"};
        javax.swing.JTextField[] fields = new javax.swing.JTextField[labels.length];
        
        // Branch Code (disabled)
        gbc.gridx = 0;
        gbc.gridy = 0;
        mainPanel.add(new javax.swing.JLabel(labels[0]), gbc);
        
        gbc.gridx = 1;
        gbc.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gbc.weightx = 1.0;
        fields[0] = new javax.swing.JTextField(branchTableModel.getValueAt(row, 1).toString());
        fields[0].setEnabled(false);
        mainPanel.add(fields[0], gbc);
        
        // Get address parts
        String[] addressParts = branchTableModel.getValueAt(row, 3).toString().split(", ");
        String city = addressParts[0];
        String state = addressParts[1];
        String zip = addressParts[2];
        
        // Other fields
        String[] values = {
            "", // Branch Code already added
            branchTableModel.getValueAt(row, 2).toString(), // Street
            city,
            state,
            zip,
            branchTableModel.getValueAt(row, 4).toString(), // Country
            branchTableModel.getValueAt(row, 5).toString()  // Contact
        };
        
        for (int i = 1; i < labels.length; i++) {
            gbc.gridx = 0;
            gbc.gridy = i;
            mainPanel.add(new javax.swing.JLabel(labels[i]), gbc);
            
            gbc.gridx = 1;
            gbc.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gbc.weightx = 1.0;
            fields[i] = new javax.swing.JTextField(values[i]);
            mainPanel.add(fields[i], gbc);
        }
        
        // Create button panel
        javax.swing.JPanel buttonPanel = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));
        
        javax.swing.JButton saveButton = new javax.swing.JButton("Save");
        saveButton.setBackground(new java.awt.Color(0, 123, 255));
        saveButton.setForeground(java.awt.Color.WHITE);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                // Validate fields
                for (int i = 1; i < fields.length; i++) {  // Skip branch code
                    String value = fields[i].getText().trim();
                    if (value.isEmpty()) {
                        javax.swing.JOptionPane.showMessageDialog(dialog,
                            "All fields are required.",
                            "Validation Error",
                            javax.swing.JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }

                // Validate phone number
                String phone = fields[6].getText().trim();
                if (!validatePhoneNumber(phone)) {
                    javax.swing.JOptionPane.showMessageDialog(dialog,
                        "Contact number must be exactly 10 digits.",
                        "Validation Error",
                        javax.swing.JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                // Update row in table
                branchTableModel.setValueAt(fields[1].getText(), row, 2); // Street
                branchTableModel.setValueAt(
                    fields[2].getText() + ", " + fields[3].getText() + ", " + fields[4].getText(),
                    row, 3
                ); // City, State, ZIP
                branchTableModel.setValueAt(fields[5].getText(), row, 4); // Country
                branchTableModel.setValueAt(fields[6].getText(), row, 5); // Contact
                
                // Close dialog
                dialog.dispose();
                
                // Show success message
                javax.swing.JOptionPane.showMessageDialog(Dashboard.this,
                    "Branch updated successfully!",
                    "Success",
                    javax.swing.JOptionPane.INFORMATION_MESSAGE);
            }
        });
        
        javax.swing.JButton cancelButton = new javax.swing.JButton("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dialog.dispose();
            }
        });
        
        buttonPanel.add(saveButton);
        buttonPanel.add(cancelButton);
        
        // Add panels to dialog
        dialog.add(mainPanel, java.awt.BorderLayout.CENTER);
        dialog.add(buttonPanel, java.awt.BorderLayout.SOUTH);
        
        // Set dialog properties
        dialog.pack();
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
    }

    private void showAddBranchDialog() {
        // Create the dialog
        javax.swing.JDialog dialog = new javax.swing.JDialog(Dashboard.this, "Add New Branch", true);
        dialog.setLayout(new java.awt.BorderLayout());
        
        // Create main panel
        javax.swing.JPanel mainPanel = new javax.swing.JPanel();
        mainPanel.setLayout(new java.awt.GridBagLayout());
        mainPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 20, 20, 20));
        
        java.awt.GridBagConstraints gbc = new java.awt.GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = java.awt.GridBagConstraints.WEST;
        gbc.insets = new java.awt.Insets(5, 5, 5, 5);
        
        // Add form fields
        String[] labels = {"Street/Building/Brgy:", "City:", "State/Province:", "ZIP Code:", "Country:", "Contact Number:"};
        javax.swing.JTextField[] fields = new javax.swing.JTextField[labels.length];
        
        for (int i = 0; i < labels.length; i++) {
            gbc.gridx = 0;
            gbc.gridy = i;
            mainPanel.add(new javax.swing.JLabel(labels[i]), gbc);
            
            gbc.gridx = 1;
            gbc.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gbc.weightx = 1.0;
            fields[i] = new javax.swing.JTextField(20);
            mainPanel.add(fields[i], gbc);
        }
        
        // Create button panel
        javax.swing.JPanel buttonPanel = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));
        
        javax.swing.JButton saveButton = new javax.swing.JButton("Save");
        saveButton.setBackground(new java.awt.Color(0, 123, 255));
        saveButton.setForeground(java.awt.Color.WHITE);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                // Validate fields
                for (int i = 1; i < fields.length; i++) {  // Skip branch code
                    String value = fields[i].getText().trim();
                    if (value.isEmpty()) {
                        javax.swing.JOptionPane.showMessageDialog(dialog,
                            "All fields are required.",
                            "Validation Error",
                            javax.swing.JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }

                // Validate phone number
                String phone = fields[5].getText().trim();
                if (!validatePhoneNumber(phone)) {
                    javax.swing.JOptionPane.showMessageDialog(dialog,
                        "Contact number must be exactly 10 digits.",
                        "Validation Error",
                        javax.swing.JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                // Generate branch code
                String branchCode = generateBranchCode();
                
                // Add new row to table
                Object[] rowData = {
                    branchTableModel.getRowCount() + 1,
                    branchCode,
                    fields[0].getText(),
                    fields[1].getText() + ", " + fields[2].getText() + ", " + fields[3].getText(),
                    fields[4].getText(),
                    fields[5].getText(),
                    ""
                };
                branchTableModel.addRow(rowData);
                
                // Close dialog
                dialog.dispose();
                
                // Show success message
                javax.swing.JOptionPane.showMessageDialog(Dashboard.this,
                    "Branch added successfully!",
                    "Success",
                    javax.swing.JOptionPane.INFORMATION_MESSAGE);
            }
        });
        
        javax.swing.JButton cancelButton = new javax.swing.JButton("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dialog.dispose();
            }
        });
        
        buttonPanel.add(saveButton);
        buttonPanel.add(cancelButton);
        
        // Add panels to dialog
        dialog.add(mainPanel, java.awt.BorderLayout.CENTER);
        dialog.add(buttonPanel, java.awt.BorderLayout.SOUTH);
        
        // Set dialog properties
        dialog.pack();
        dialog.setLocationRelativeTo(this);
        dialog.setResizable(false);
        dialog.setVisible(true);
    }

    private String generateBranchCode() {
        String chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        StringBuilder code = new StringBuilder();
        java.util.Random rnd = new java.util.Random();
        for (int i = 0; i < 15; i++) {
            code.append(chars.charAt(rnd.nextInt(chars.length())));
        }
        return code.toString();
    }

    private class ParcelActionColumnRenderer implements javax.swing.table.TableCellRenderer {
        private final javax.swing.JPanel panel;
        private final javax.swing.JButton editButton;
        private final javax.swing.JButton deleteButton;

        public ParcelActionColumnRenderer() {
            panel = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
            panel.setBackground(java.awt.Color.WHITE);

            editButton = new javax.swing.JButton("Edit");
            editButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 12));
            editButton.setBackground(new java.awt.Color(0, 123, 255));
            editButton.setForeground(java.awt.Color.WHITE);
            editButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
            editButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

            deleteButton = new javax.swing.JButton("Delete");
            deleteButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 12));
            deleteButton.setBackground(new java.awt.Color(220, 53, 69));
            deleteButton.setForeground(java.awt.Color.WHITE);
            deleteButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
            deleteButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

            panel.add(editButton);
            panel.add(deleteButton);
        }

        @Override
        public java.awt.Component getTableCellRendererComponent(javax.swing.JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
            return panel;
        }
    }

    private class ParcelActionColumnEditor extends javax.swing.AbstractCellEditor implements javax.swing.table.TableCellEditor {
        private final javax.swing.JPanel panel;
        private final javax.swing.JButton editButton;
        private final javax.swing.JButton deleteButton;

        public ParcelActionColumnEditor() {
            panel = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
            panel.setBackground(java.awt.Color.WHITE);

            editButton = new javax.swing.JButton("Edit");
            editButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 12));
            editButton.setBackground(new java.awt.Color(0, 123, 255));
            editButton.setForeground(java.awt.Color.WHITE);
            editButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
            editButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

            deleteButton = new javax.swing.JButton("Delete");
            deleteButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 12));
            deleteButton.setBackground(new java.awt.Color(220, 53, 69));
            deleteButton.setForeground(java.awt.Color.WHITE);
            deleteButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
            deleteButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

            editButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent e) {
                    int row = parcelsTable.getSelectedRow();
                    if (row != -1) {
                        row = parcelsTable.convertRowIndexToModel(row);
                        showEditParcelDialog(row);
                        fireEditingStopped();
                    }
                }
            });

            deleteButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent e) {
                    int row = parcelsTable.getSelectedRow();
                    if (row != -1) {
                        row = parcelsTable.convertRowIndexToModel(row);
                        int confirm = javax.swing.JOptionPane.showConfirmDialog(
                            Dashboard.this,
                            "Are you sure you want to delete this parcel?",
                            "Confirm Delete",
                            javax.swing.JOptionPane.YES_NO_OPTION,
                            javax.swing.JOptionPane.WARNING_MESSAGE
                        );
                        
                        if (confirm == javax.swing.JOptionPane.YES_OPTION) {
                            parcelsTableModel.removeRow(row);
                            // Update row numbers
                            for (int i = 0; i < parcelsTableModel.getRowCount(); i++) {
                                parcelsTableModel.setValueAt(i + 1, i, 0);
                            }
                            javax.swing.JOptionPane.showMessageDialog(
                                Dashboard.this,
                                "Parcel deleted successfully!",
                                "Success",
                                javax.swing.JOptionPane.INFORMATION_MESSAGE
                            );
                        }
                        fireEditingStopped();
                    }
                }
            });

            panel.add(editButton);
            panel.add(deleteButton);
        }

        @Override
        public java.awt.Component getTableCellEditorComponent(javax.swing.JTable table, Object value,
                boolean isSelected, int row, int column) {
            return panel;
        }

        @Override
        public Object getCellEditorValue() {
            return "";
        }
    }

    private void showEditParcelDialog(int row) {
        // Create the dialog
        javax.swing.JDialog dialog = new javax.swing.JDialog(this, "Edit Parcel", true);
        dialog.setLayout(new java.awt.BorderLayout());
        
        // Create main panel
        javax.swing.JPanel mainPanel = new javax.swing.JPanel();
        mainPanel.setLayout(new java.awt.GridBagLayout());
        mainPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 20, 20, 20));
        
        java.awt.GridBagConstraints gbc = new java.awt.GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = java.awt.GridBagConstraints.WEST;
        gbc.insets = new java.awt.Insets(5, 5, 5, 5);
        
        // Add form fields
        String[] labels = {"Reference Number:", "Sender:", "Recipient:", "Status:"};
        javax.swing.JTextField[] fields = new javax.swing.JTextField[labels.length - 1]; // Excluding status
        
        // Reference Number (disabled)
        gbc.gridx = 0;
        gbc.gridy = 0;
        mainPanel.add(new javax.swing.JLabel(labels[0]), gbc);
        
        gbc.gridx = 1;
        gbc.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gbc.weightx = 1.0;
        fields[0] = new javax.swing.JTextField(parcelsTableModel.getValueAt(row, 1).toString());
        fields[0].setEnabled(false);
        mainPanel.add(fields[0], gbc);
        
        // Other text fields
        String[] values = {
            "", // Reference Number already added
            parcelsTableModel.getValueAt(row, 2).toString(), // Sender
            parcelsTableModel.getValueAt(row, 3).toString(), // Recipient
        };
        
        for (int i = 1; i < labels.length - 1; i++) {
            gbc.gridx = 0;
            gbc.gridy = i;
            mainPanel.add(new javax.swing.JLabel(labels[i]), gbc);
            
            gbc.gridx = 1;
            gbc.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gbc.weightx = 1.0;
            fields[i] = new javax.swing.JTextField(values[i]);
            mainPanel.add(fields[i], gbc);
        }

        // Status dropdown
        gbc.gridx = 0;
        gbc.gridy = labels.length - 1;
        mainPanel.add(new javax.swing.JLabel(labels[labels.length - 1]), gbc);

        gbc.gridx = 1;
        String[] statuses = {"Pending", "In Transit", "Delivered"};
        javax.swing.JComboBox<String> statusCombo = new javax.swing.JComboBox<>(statuses);
        statusCombo.setSelectedItem(parcelsTableModel.getValueAt(row, 4).toString());
        mainPanel.add(statusCombo, gbc);
        
        // Create button panel
        javax.swing.JPanel buttonPanel = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));
        
        javax.swing.JButton saveButton = new javax.swing.JButton("Save");
        saveButton.setBackground(new java.awt.Color(0, 123, 255));
        saveButton.setForeground(java.awt.Color.WHITE);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                // Validate fields
                for (int i = 1; i < fields.length; i++) {  // Skip reference number
                    if (fields[i].getText().trim().isEmpty()) {
                        javax.swing.JOptionPane.showMessageDialog(dialog,
                            "All fields are required.",
                            "Validation Error",
                            javax.swing.JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
                
                // Update row in table
                parcelsTableModel.setValueAt(fields[1].getText(), row, 2); // Sender
                parcelsTableModel.setValueAt(fields[2].getText(), row, 3); // Recipient
                parcelsTableModel.setValueAt(statusCombo.getSelectedItem(), row, 4); // Status
                
                // Close dialog
                dialog.dispose();
                
                // Show success message
                javax.swing.JOptionPane.showMessageDialog(Dashboard.this,
                    "Parcel updated successfully!",
                    "Success",
                    javax.swing.JOptionPane.INFORMATION_MESSAGE);
            }
        });
        
        javax.swing.JButton cancelButton = new javax.swing.JButton("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dialog.dispose();
            }
        });
        
        buttonPanel.add(saveButton);
        buttonPanel.add(cancelButton);
        
        // Add panels to dialog
        dialog.add(mainPanel, java.awt.BorderLayout.CENTER);
        dialog.add(buttonPanel, java.awt.BorderLayout.SOUTH);
        
        // Set dialog properties
        dialog.pack();
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
    }

    private void showAddParcelDialog() {
        // Create the dialog
        javax.swing.JDialog dialog = new javax.swing.JDialog(this, "Add New Parcel", true);
        dialog.setLayout(new java.awt.BorderLayout());
        
        // Create main panel
        javax.swing.JPanel mainPanel = new javax.swing.JPanel();
        mainPanel.setLayout(new java.awt.GridBagLayout());
        mainPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 20, 20, 20));
        
        java.awt.GridBagConstraints gbc = new java.awt.GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = java.awt.GridBagConstraints.WEST;
        gbc.insets = new java.awt.Insets(5, 5, 5, 5);
        
        // Add form fields
        String[] labels = {"Reference Number:", "Sender:", "Recipient:", "Status:"};
        javax.swing.JTextField[] fields = new javax.swing.JTextField[labels.length - 1]; // Excluding status
        
        // Reference Number (auto-generated)
        gbc.gridx = 0;
        gbc.gridy = 0;
        mainPanel.add(new javax.swing.JLabel(labels[0]), gbc);
        
        gbc.gridx = 1;
        gbc.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gbc.weightx = 1.0;
        String refNumber = generateParcelRefNumber();
        javax.swing.JTextField refField = new javax.swing.JTextField(refNumber);
        refField.setEnabled(false);
        mainPanel.add(refField, gbc);
        
        // Other text fields
        for (int i = 1; i < labels.length - 1; i++) {
            gbc.gridx = 0;
            gbc.gridy = i;
            mainPanel.add(new javax.swing.JLabel(labels[i]), gbc);
            
            gbc.gridx = 1;
            gbc.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gbc.weightx = 1.0;
            fields[i-1] = new javax.swing.JTextField(20);
            mainPanel.add(fields[i-1], gbc);
        }
        
        // Status dropdown
        gbc.gridx = 0;
        gbc.gridy = labels.length - 1;
        mainPanel.add(new javax.swing.JLabel(labels[labels.length - 1]), gbc);
        
        gbc.gridx = 1;
        String[] statuses = {"Pending", "In Transit", "Delivered"};
        javax.swing.JComboBox<String> statusCombo = new javax.swing.JComboBox<>(statuses);
        mainPanel.add(statusCombo, gbc);
        
        // Create button panel
        javax.swing.JPanel buttonPanel = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));
        
        javax.swing.JButton saveButton = new javax.swing.JButton("Save");
        saveButton.setBackground(new java.awt.Color(0, 123, 255));
        saveButton.setForeground(java.awt.Color.WHITE);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                // Validate fields
                for (javax.swing.JTextField field : fields) {
                    if (field.getText().trim().isEmpty()) {
                        javax.swing.JOptionPane.showMessageDialog(dialog,
                            "All fields are required.",
                            "Validation Error",
                            javax.swing.JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
                
                // Add new row to table
                Object[] rowData = {
                    parcelsTableModel.getRowCount() + 1,
                    refNumber,
                    fields[0].getText(), // Sender
                    fields[1].getText(), // Recipient
                    statusCombo.getSelectedItem(),
                    ""  // Action column
                };
                parcelsTableModel.addRow(rowData);
                
                // Close dialog
                dialog.dispose();
                
                // Show success message
                javax.swing.JOptionPane.showMessageDialog(Dashboard.this,
                    "Parcel added successfully!",
                    "Success",
                    javax.swing.JOptionPane.INFORMATION_MESSAGE);
            }
        });
        
        javax.swing.JButton cancelButton = new javax.swing.JButton("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dialog.dispose();
            }
        });
        
        buttonPanel.add(saveButton);
        buttonPanel.add(cancelButton);
        
        // Add panels to dialog
        dialog.add(mainPanel, java.awt.BorderLayout.CENTER);
        dialog.add(buttonPanel, java.awt.BorderLayout.SOUTH);
        
        // Set dialog properties
        dialog.pack();
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
    }

    private String generateParcelRefNumber() {
        // Generate a random reference number in format PCLxxxxx where x is a digit
        java.util.Random random = new java.util.Random();
        StringBuilder sb = new StringBuilder("PCL");
        for (int i = 0; i < 5; i++) {
            sb.append(random.nextInt(10));
        }
        return sb.toString();
    }

    private class StaffActionColumnRenderer implements javax.swing.table.TableCellRenderer {
        private final javax.swing.JPanel panel;
        private final javax.swing.JButton editButton;
        private final javax.swing.JButton deleteButton;

        public StaffActionColumnRenderer() {
            panel = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
            panel.setBackground(java.awt.Color.WHITE);

            editButton = new javax.swing.JButton("Edit");
            editButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 12));
            editButton.setBackground(new java.awt.Color(0, 123, 255));
            editButton.setForeground(java.awt.Color.WHITE);
            editButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
            editButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

            deleteButton = new javax.swing.JButton("Delete");
            deleteButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 12));
            deleteButton.setBackground(new java.awt.Color(220, 53, 69));
            deleteButton.setForeground(java.awt.Color.WHITE);
            deleteButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
            deleteButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

            panel.add(editButton);
            panel.add(deleteButton);
        }

        @Override
        public java.awt.Component getTableCellRendererComponent(javax.swing.JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
            return panel;
        }
    }

    private class StaffActionColumnEditor extends javax.swing.DefaultCellEditor {
        private final javax.swing.JPanel panel;
        private final javax.swing.JButton editButton;
        private final javax.swing.JButton deleteButton;

        public StaffActionColumnEditor() {
            super(new javax.swing.JCheckBox());
            
            panel = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 5, 0));
            panel.setBackground(java.awt.Color.WHITE);

            editButton = new javax.swing.JButton("Edit");
            editButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 12));
            editButton.setBackground(new java.awt.Color(0, 123, 255));
            editButton.setForeground(java.awt.Color.WHITE);
            editButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
            editButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            editButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    int row = staffTable.getSelectedRow();
                    if (row != -1) {
                        showEditStaffDialog(row);
                    }
                    fireEditingStopped();
                }
            });

            deleteButton = new javax.swing.JButton("Delete");
            deleteButton.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 12));
            deleteButton.setBackground(new java.awt.Color(220, 53, 69));
            deleteButton.setForeground(java.awt.Color.WHITE);
            deleteButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10));
            deleteButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            deleteButton.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    int row = staffTable.getSelectedRow();
                    if (row != -1) {
                        int confirm = javax.swing.JOptionPane.showConfirmDialog(
                            Dashboard.this,
                            "Are you sure you want to delete this staff member?",
                            "Confirm Delete",
                            javax.swing.JOptionPane.YES_NO_OPTION,
                            javax.swing.JOptionPane.WARNING_MESSAGE
                        );
                        
                        if (confirm == javax.swing.JOptionPane.YES_OPTION) {
                            staffTableModel.removeRow(row);
                            // Update row numbers
                            for (int i = 0; i < staffTableModel.getRowCount(); i++) {
                                staffTableModel.setValueAt(i + 1, i, 0);
                            }
                        }
                    }
                    fireEditingStopped();
                }
            });

            panel.add(editButton);
            panel.add(deleteButton);
        }

        @Override
        public java.awt.Component getTableCellEditorComponent(javax.swing.JTable table, Object value,
                boolean isSelected, int row, int column) {
            return panel;
        }

        @Override
        public Object getCellEditorValue() {
            return "";
        }
    }

    private void showEditStaffDialog(int row) {
        // Create the dialog
        javax.swing.JDialog dialog = new javax.swing.JDialog(this, "Edit Staff", true);
        dialog.setLayout(new java.awt.BorderLayout());
        
        // Create main panel
        javax.swing.JPanel mainPanel = new javax.swing.JPanel();
        mainPanel.setLayout(new java.awt.GridBagLayout());
        mainPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 20, 20, 20));
        
        java.awt.GridBagConstraints gbc = new java.awt.GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = java.awt.GridBagConstraints.WEST;
        gbc.insets = new java.awt.Insets(5, 5, 5, 5);
        
        // Add form fields
        String[] labels = {
            "Staff ID:", 
            "First Name:", 
            "Last Name:", 
            "Email:", 
            "Phone:", 
            "Branch:", 
            "Role:"
        };
        
        javax.swing.JTextField[] fields = new javax.swing.JTextField[labels.length - 1]; // Excluding Role which will be a combo box
        
        // Staff ID (disabled)
        gbc.gridx = 0;
        gbc.gridy = 0;
        mainPanel.add(new javax.swing.JLabel(labels[0]), gbc);
        
        gbc.gridx = 1;
        gbc.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gbc.weightx = 1.0;
        fields[0] = new javax.swing.JTextField(staffTableModel.getValueAt(row, 1).toString());
        fields[0].setEnabled(false);
        mainPanel.add(fields[0], gbc);
        
        // Other text fields
        for (int i = 1; i < labels.length - 1; i++) {
            gbc.gridx = 0;
            gbc.gridy = i;
            mainPanel.add(new javax.swing.JLabel(labels[i]), gbc);
            
            gbc.gridx = 1;
            gbc.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gbc.weightx = 1.0;
            fields[i] = new javax.swing.JTextField(staffTableModel.getValueAt(row, i + 1).toString());
            mainPanel.add(fields[i], gbc);
        }
        
        // Role combo box
        gbc.gridx = 0;
        gbc.gridy = labels.length - 1;
        mainPanel.add(new javax.swing.JLabel(labels[labels.length - 1]), gbc);
        
        gbc.gridx = 1;
        String[] roles = {"Branch Manager", "Staff", "Delivery Personnel"};
        javax.swing.JComboBox<String> roleCombo = new javax.swing.JComboBox<>(roles);
        roleCombo.setSelectedItem(staffTableModel.getValueAt(row, 7).toString());
        mainPanel.add(roleCombo, gbc);
        
        // Create button panel
        javax.swing.JPanel buttonPanel = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));
        
        javax.swing.JButton saveButton = new javax.swing.JButton("Save");
        saveButton.setBackground(new java.awt.Color(0, 123, 255));
        saveButton.setForeground(java.awt.Color.WHITE);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                // Validate fields
                for (int i = 1; i < fields.length; i++) {  // Skip staff ID
                    String value = fields[i].getText().trim();
                    if (value.isEmpty()) {
                        javax.swing.JOptionPane.showMessageDialog(dialog,
                            "All fields are required.",
                            "Validation Error",
                            javax.swing.JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
                
                // Validate email
                String email = fields[3].getText().trim();
                if (!validateEmail(email)) {
                    javax.swing.JOptionPane.showMessageDialog(dialog,
                        "Please enter a valid Gmail address.",
                        "Validation Error",
                        javax.swing.JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                // Validate phone number
                String phone = fields[4].getText().trim();
                if (!validatePhoneNumber(phone)) {
                    javax.swing.JOptionPane.showMessageDialog(dialog,
                        "Please enter a valid 10-digit phone number.",
                        "Validation Error",
                        javax.swing.JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                // Update row in staff table
                staffTableModel.setValueAt(fields[0].getText(), row, 1); // Staff ID
                staffTableModel.setValueAt(fields[1].getText(), row, 2); // First Name
                staffTableModel.setValueAt(fields[2].getText(), row, 3); // Last Name
                staffTableModel.setValueAt(fields[3].getText(), row, 4); // Email
                staffTableModel.setValueAt(fields[4].getText(), row, 5); // Phone
                staffTableModel.setValueAt(fields[5].getText(), row, 6); // Branch
                staffTableModel.setValueAt(roleCombo.getSelectedItem(), row, 7); // Role
                
                // Show success message and close dialog
                javax.swing.JOptionPane.showMessageDialog(dialog,
                    "Staff member updated successfully!",
                    "Success",
                    javax.swing.JOptionPane.INFORMATION_MESSAGE);
                dialog.dispose();
            }
        });
        
        javax.swing.JButton cancelButton = new javax.swing.JButton("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dialog.dispose();
            }
        });
        
        buttonPanel.add(saveButton);
        buttonPanel.add(cancelButton);
        
        // Add panels to dialog
        dialog.add(mainPanel, java.awt.BorderLayout.CENTER);
        dialog.add(buttonPanel, java.awt.BorderLayout.SOUTH);
        
        // Set dialog properties
        dialog.pack();
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
    }

    private boolean validatePhoneNumber(String phone) {
        // Remove any non-digit characters
        String digits = phone.replaceAll("\\D", "");
        return digits.length() == 10;
    }

    private boolean validateEmail(String email) {
        return email.toLowerCase().endsWith("@gmail.com");
    }

    private void showAddStaffDialog() {
        // Create the dialog
        javax.swing.JDialog dialog = new javax.swing.JDialog(this, "Add New Staff", true);
        dialog.setLayout(new java.awt.BorderLayout());
        
        // Create main panel
        javax.swing.JPanel mainPanel = new javax.swing.JPanel();
        mainPanel.setLayout(new java.awt.GridBagLayout());
        mainPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 20, 20, 20));
        
        java.awt.GridBagConstraints gbc = new java.awt.GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.anchor = java.awt.GridBagConstraints.WEST;
        gbc.insets = new java.awt.Insets(5, 5, 5, 5);
        
        // Add form fields
        String[] labels = {
            "Staff ID:", 
            "First Name:", 
            "Last Name:", 
            "Email:", 
            "Phone:", 
            "Branch:", 
            "Role:"
        };
        
        javax.swing.JTextField[] fields = new javax.swing.JTextField[labels.length - 1]; // Excluding Role which will be a combo box
        
        // Staff ID (auto-generated and disabled)
        gbc.gridx = 0;
        gbc.gridy = 0;
        mainPanel.add(new javax.swing.JLabel(labels[0]), gbc);
        
        gbc.gridx = 1;
        gbc.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gbc.weightx = 1.0;
        fields[0] = new javax.swing.JTextField(generateStaffId());
        fields[0].setEnabled(false);
        mainPanel.add(fields[0], gbc);
        
        // Other text fields
        for (int i = 1; i < labels.length - 1; i++) {
            gbc.gridx = 0;
            gbc.gridy = i;
            mainPanel.add(new javax.swing.JLabel(labels[i]), gbc);
            
            gbc.gridx = 1;
            gbc.fill = java.awt.GridBagConstraints.HORIZONTAL;
            gbc.weightx = 1.0;
            fields[i] = new javax.swing.JTextField(20);
            mainPanel.add(fields[i], gbc);
        }
        
        // Role combo box
        gbc.gridx = 0;
        gbc.gridy = labels.length - 1;
        mainPanel.add(new javax.swing.JLabel(labels[labels.length - 1]), gbc);
        
        gbc.gridx = 1;
        String[] roles = {"Branch Manager", "Staff", "Delivery Personnel"};
        javax.swing.JComboBox<String> roleCombo = new javax.swing.JComboBox<>(roles);
        mainPanel.add(roleCombo, gbc);
        
        // Create button panel
        javax.swing.JPanel buttonPanel = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));
        
        javax.swing.JButton saveButton = new javax.swing.JButton("Save");
        saveButton.setBackground(new java.awt.Color(0, 123, 255));
        saveButton.setForeground(java.awt.Color.WHITE);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                // Validate fields
                for (int i = 1; i < fields.length; i++) {  // Skip staff ID
                    String value = fields[i].getText().trim();
                    if (value.isEmpty()) {
                        javax.swing.JOptionPane.showMessageDialog(dialog,
                            "All fields are required.",
                            "Validation Error",
                            javax.swing.JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
                
                // Validate email
                String email = fields[3].getText().trim();
                if (!validateEmail(email)) {
                    javax.swing.JOptionPane.showMessageDialog(dialog,
                        "Please enter a valid Gmail address.",
                        "Validation Error",
                        javax.swing.JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                // Validate phone number
                String phone = fields[4].getText().trim();
                if (!validatePhoneNumber(phone)) {
                    javax.swing.JOptionPane.showMessageDialog(dialog,
                        "Please enter a valid 10-digit phone number.",
                        "Validation Error",
                        javax.swing.JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                // Add new row to staff table
                Object[] rowData = {
                    staffTableModel.getRowCount() + 1,
                    fields[0].getText(), // Staff ID
                    fields[1].getText(), // First Name
                    fields[2].getText(), // Last Name
                    fields[3].getText(), // Email
                    fields[4].getText(), // Phone
                    fields[5].getText(), // Branch
                    roleCombo.getSelectedItem(), // Role
                    "" // Action column
                };
                staffTableModel.addRow(rowData);
                
                // Show success message and close dialog
                javax.swing.JOptionPane.showMessageDialog(dialog,
                    "Staff member added successfully!",
                    "Success",
                    javax.swing.JOptionPane.INFORMATION_MESSAGE);
                dialog.dispose();
            }
        });
        
        javax.swing.JButton cancelButton = new javax.swing.JButton("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dialog.dispose();
            }
        });
        
        buttonPanel.add(saveButton);
        buttonPanel.add(cancelButton);
        
        // Add panels to dialog
        dialog.add(mainPanel, java.awt.BorderLayout.CENTER);
        dialog.add(buttonPanel, java.awt.BorderLayout.SOUTH);
        
        // Set dialog properties
        dialog.pack();
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
    }

    private String generateStaffId() {
        String chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        StringBuilder id = new StringBuilder("STF");
        java.util.Random rnd = new java.util.Random();
        for (int i = 0; i < 7; i++) {
            id.append(chars.charAt(rnd.nextInt(chars.length())));
        }
        return id.toString();
    }

    private void setupTrackParcelsContent() {
        // Create track parcels panel
        javax.swing.JPanel trackParcelsContent = new javax.swing.JPanel();
        trackParcelsContent.setLayout(new java.awt.BorderLayout(0, 0));
        trackParcelsContent.setBackground(java.awt.Color.WHITE);
        
        // Create main content panel
        javax.swing.JPanel mainContent = new javax.swing.JPanel();
        mainContent.setLayout(new java.awt.BorderLayout());
        mainContent.setBackground(java.awt.Color.WHITE);
        mainContent.setBorder(javax.swing.BorderFactory.createEmptyBorder(30, 0, 0, 0));

        // Add title panel
        javax.swing.JPanel titlePanel = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 0, 0));
        titlePanel.setBackground(java.awt.Color.WHITE);
        javax.swing.JLabel titleLabel = new javax.swing.JLabel("Track Parcels");
        titleLabel.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 32));
        titlePanel.add(titleLabel);
        titlePanel.setBorder(javax.swing.BorderFactory.createCompoundBorder(
            javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(200, 200, 200)),
            javax.swing.BorderFactory.createEmptyBorder(20, 30, 10, 30)
        ));
        
        // Create search panel
        javax.swing.JPanel searchPanel = new javax.swing.JPanel();
        searchPanel.setLayout(new javax.swing.BoxLayout(searchPanel, javax.swing.BoxLayout.Y_AXIS));
        searchPanel.setBackground(java.awt.Color.WHITE);
        searchPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(50, 0, 0, 0));
        
        // Create label panel
        javax.swing.JPanel labelPanel = new javax.swing.JPanel();
        labelPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));
        labelPanel.setBackground(java.awt.Color.WHITE);
        labelPanel.setMaximumSize(new java.awt.Dimension(400, 30));
        javax.swing.JLabel trackingLabel = new javax.swing.JLabel("Enter Tracking Number");
        trackingLabel.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 16));
        labelPanel.add(trackingLabel);
        
        // Create search field panel
        javax.swing.JPanel searchFieldPanel = new javax.swing.JPanel();
        searchFieldPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 0));
        searchFieldPanel.setBackground(java.awt.Color.WHITE);
        searchFieldPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 0, 0, 0));
        searchFieldPanel.setMaximumSize(new java.awt.Dimension(400, 45));
        
        // Create search field
        javax.swing.JTextField searchField = new javax.swing.JTextField(20);
        searchField.setPreferredSize(new java.awt.Dimension(350, 35));
        searchField.setBorder(javax.swing.BorderFactory.createCompoundBorder(
            javax.swing.BorderFactory.createLineBorder(new java.awt.Color(200, 200, 200)),
            javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 10)
        ));
        searchField.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 14));
        
        // Create search button
        javax.swing.JButton searchButton = new javax.swing.JButton();
        searchButton.setPreferredSize(new java.awt.Dimension(35, 35));
        searchButton.setBackground(new java.awt.Color(0, 123, 255));
        searchButton.setBorder(null);
        searchButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        
        // Load and set the search icon
        try {
            javax.swing.ImageIcon originalIcon = new javax.swing.ImageIcon(getClass().getResource("/icons/search.png"));
            java.awt.Image scaledImage = originalIcon.getImage().getScaledInstance(20, 20, java.awt.Image.SCALE_SMOOTH);
            searchButton.setIcon(new javax.swing.ImageIcon(scaledImage));
        } catch (Exception e) {
            System.err.println("Error loading search icon: " + e.getMessage());
            searchButton.setText("🔍");
            searchButton.setForeground(java.awt.Color.WHITE);
        }
        
        // Add action listener to search button
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                String trackingNumber = searchField.getText().trim();
                if (trackingNumber.isEmpty()) {
                    javax.swing.JOptionPane.showMessageDialog(
                        Dashboard.this,
                        "Please enter a tracking number.",
                        "Validation Error",
                        javax.swing.JOptionPane.ERROR_MESSAGE
                    );
                    return;
                }
                showTrackingResult(trackingNumber);
            }
        });
        
        // Add components to search field panel
        searchFieldPanel.add(searchField);
        searchFieldPanel.add(searchButton);
        
        // Add components to search panel
        searchPanel.add(labelPanel);
        searchPanel.add(searchFieldPanel);
        
        // Center the search panel
        javax.swing.JPanel centerPanel = new javax.swing.JPanel(new java.awt.BorderLayout());
        centerPanel.setBackground(java.awt.Color.WHITE);
        centerPanel.add(searchPanel, java.awt.BorderLayout.CENTER);
        
        // Add components to main content
        mainContent.add(titlePanel, java.awt.BorderLayout.NORTH);
        mainContent.add(centerPanel, java.awt.BorderLayout.CENTER);
        
        // Add main content to track parcels panel
        trackParcelsContent.add(mainContent);
        
        // Add to content panel with card name
        contentPanel.add(trackParcelsContent, "trackparcels");
    }

    private void showTrackingResult(String trackingNumber) {
        // Create dialog for tracking result
        javax.swing.JDialog dialog = new javax.swing.JDialog(this, "Tracking Details", true);
        dialog.setLayout(new java.awt.BorderLayout());
        
        // Create main panel
        javax.swing.JPanel mainPanel = new javax.swing.JPanel();
        mainPanel.setLayout(new java.awt.BorderLayout(20, 20));
        mainPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(20, 20, 20, 20));
        mainPanel.setBackground(java.awt.Color.WHITE);
        
        // Create tracking details panel
        javax.swing.JPanel detailsPanel = new javax.swing.JPanel(new java.awt.GridBagLayout());
        detailsPanel.setBackground(java.awt.Color.WHITE);
        
        java.awt.GridBagConstraints gbc = new java.awt.GridBagConstraints();
        gbc.anchor = java.awt.GridBagConstraints.WEST;
        gbc.insets = new java.awt.Insets(5, 5, 5, 15);
        
        // Add tracking details
        String[][] details = {
            {"Tracking Number:", trackingNumber},
            {"Status:", "In Transit"},
            {"Current Location:", "Branch 1"},
            {"Destination:", "Branch 2"},
            {"Estimated Delivery:", "2-3 Business Days"},
            {"Last Updated:", "Today, 10:30 AM"}
        };
        
        for (int i = 0; i < details.length; i++) {
            gbc.gridx = 0;
            gbc.gridy = i;
            gbc.gridwidth = 1;
            gbc.weightx = 0;
            
            javax.swing.JLabel label = new javax.swing.JLabel(details[i][0]);
            label.setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 12));
            detailsPanel.add(label, gbc);
            
            gbc.gridx = 1;
            gbc.weightx = 1;
            
            javax.swing.JLabel value = new javax.swing.JLabel(details[i][1]);
            value.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 12));
            detailsPanel.add(value, gbc);
        }
        
        // Add tracking timeline
        javax.swing.JPanel timelinePanel = new javax.swing.JPanel();
        timelinePanel.setLayout(new javax.swing.BoxLayout(timelinePanel, javax.swing.BoxLayout.Y_AXIS));
        timelinePanel.setBackground(java.awt.Color.WHITE);
        timelinePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(
            javax.swing.BorderFactory.createEmptyBorder(),
            "Tracking Timeline",
            javax.swing.border.TitledBorder.LEFT,
            javax.swing.border.TitledBorder.TOP,
            new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 14)
        ));
        
        String[][] timeline = {
            {"Today, 10:30 AM", "Package in transit to destination"},
            {"Today, 09:15 AM", "Package picked up by courier"},
            {"Today, 08:30 AM", "Package processed at origin facility"}
        };
        
        for (String[] event : timeline) {
            javax.swing.JPanel eventPanel = new javax.swing.JPanel(new java.awt.BorderLayout(10, 0));
            eventPanel.setBackground(java.awt.Color.WHITE);
            eventPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 0, 5, 0));
            
            javax.swing.JLabel timeLabel = new javax.swing.JLabel(event[0]);
            timeLabel.setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 12));
            
            javax.swing.JLabel descLabel = new javax.swing.JLabel(event[1]);
            descLabel.setFont(new java.awt.Font("Segoe UI", java.awt.Font.PLAIN, 12));
            
            eventPanel.add(timeLabel, java.awt.BorderLayout.WEST);
            eventPanel.add(descLabel, java.awt.BorderLayout.CENTER);
            
            timelinePanel.add(eventPanel);
        }
        
        // Create button panel
        javax.swing.JPanel buttonPanel = new javax.swing.JPanel(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));
        buttonPanel.setBackground(java.awt.Color.WHITE);
        
        javax.swing.JButton closeButton = new javax.swing.JButton("Close");
        closeButton.setBackground(new java.awt.Color(0, 123, 255));
        closeButton.setForeground(java.awt.Color.WHITE);
        closeButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 15, 5, 15));
        closeButton.addActionListener(e -> dialog.dispose());
        
        buttonPanel.add(closeButton);
        
        // Add panels to main panel
        mainPanel.add(detailsPanel, java.awt.BorderLayout.NORTH);
        mainPanel.add(timelinePanel, java.awt.BorderLayout.CENTER);
        mainPanel.add(buttonPanel, java.awt.BorderLayout.SOUTH);
        
        // Add main panel to dialog
        dialog.add(mainPanel);
        
        // Set dialog properties
        dialog.setSize(500, 400);
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
    }
}
